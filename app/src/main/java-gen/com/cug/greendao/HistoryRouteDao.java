package com.cug.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cug.greendao.HistoryRoute;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_ROUTE".
*/
public class HistoryRouteDao extends AbstractDao<HistoryRoute, Long> {

    public static final String TABLENAME = "HISTORY_ROUTE";

    /**
     * Properties of entity HistoryRoute.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SheetId = new Property(1, Integer.class, "sheetId", false, "SHEET_ID");
        public final static Property PeriodId = new Property(2, Integer.class, "periodId", false, "PERIOD_ID");
        public final static Property Points = new Property(3, String.class, "points", false, "POINTS");
        public final static Property StartTime = new Property(4, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "END_TIME");
        public final static Property GenerId = new Property(6, Integer.class, "generId", false, "GENER_ID");
    };


    public HistoryRouteDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryRouteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_ROUTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHEET_ID\" INTEGER," + // 1: sheetId
                "\"PERIOD_ID\" INTEGER," + // 2: periodId
                "\"POINTS\" TEXT," + // 3: points
                "\"START_TIME\" TEXT," + // 4: startTime
                "\"END_TIME\" TEXT," + // 5: endTime
                "\"GENER_ID\" INTEGER);"); // 6: generId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_ROUTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HistoryRoute entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sheetId = entity.getSheetId();
        if (sheetId != null) {
            stmt.bindLong(2, sheetId);
        }
 
        Integer periodId = entity.getPeriodId();
        if (periodId != null) {
            stmt.bindLong(3, periodId);
        }
 
        String points = entity.getPoints();
        if (points != null) {
            stmt.bindString(4, points);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(5, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        Integer generId = entity.getGenerId();
        if (generId != null) {
            stmt.bindLong(7, generId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HistoryRoute readEntity(Cursor cursor, int offset) {
        HistoryRoute entity = new HistoryRoute( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sheetId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // periodId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // points
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // generId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HistoryRoute entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSheetId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPeriodId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPoints(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGenerId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HistoryRoute entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HistoryRoute entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
