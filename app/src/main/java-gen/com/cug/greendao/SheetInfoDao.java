package com.cug.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cug.greendao.SheetInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHEET_INFO".
*/
public class SheetInfoDao extends AbstractDao<SheetInfo, Long> {

    public static final String TABLENAME = "SHEET_INFO";

    /**
     * Properties of entity SheetInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SheetId = new Property(1, Integer.class, "sheetId", false, "SHEET_ID");
        public final static Property SheetName = new Property(2, String.class, "sheetName", false, "SHEET_NAME");
        public final static Property SheetIntro = new Property(3, String.class, "sheetIntro", false, "SHEET_INTRO");
        public final static Property BranchId = new Property(4, Integer.class, "branchId", false, "BRANCH_ID");
        public final static Property IsDownLoad = new Property(5, boolean.class, "isDownLoad", false, "IS_DOWN_LOAD");
        public final static Property DoneTime = new Property(6, Integer.class, "doneTime", false, "DONE_TIME");
        public final static Property Length = new Property(7, Integer.class, "length", false, "LENGTH");
        public final static Property IsDoing = new Property(8, boolean.class, "isDoing", false, "IS_DOING");
        public final static Property IsDone = new Property(9, boolean.class, "isDone", false, "IS_DONE");
    };


    public SheetInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SheetInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHEET_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHEET_ID\" INTEGER," + // 1: sheetId
                "\"SHEET_NAME\" TEXT," + // 2: sheetName
                "\"SHEET_INTRO\" TEXT," + // 3: sheetIntro
                "\"BRANCH_ID\" INTEGER," + // 4: branchId
                "\"IS_DOWN_LOAD\" INTEGER NOT NULL ," + // 5: isDownLoad
                "\"DONE_TIME\" INTEGER," + // 6: doneTime
                "\"LENGTH\" INTEGER," + // 7: length
                "\"IS_DOING\" INTEGER NOT NULL ," + // 8: isDoing
                "\"IS_DONE\" INTEGER NOT NULL );"); // 9: isDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHEET_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SheetInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sheetId = entity.getSheetId();
        if (sheetId != null) {
            stmt.bindLong(2, sheetId);
        }
 
        String sheetName = entity.getSheetName();
        if (sheetName != null) {
            stmt.bindString(3, sheetName);
        }
 
        String sheetIntro = entity.getSheetIntro();
        if (sheetIntro != null) {
            stmt.bindString(4, sheetIntro);
        }
 
        Integer branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindLong(5, branchId);
        }
        stmt.bindLong(6, entity.getIsDownLoad() ? 1L: 0L);
 
        Integer doneTime = entity.getDoneTime();
        if (doneTime != null) {
            stmt.bindLong(7, doneTime);
        }
 
        Integer length = entity.getLength();
        if (length != null) {
            stmt.bindLong(8, length);
        }
        stmt.bindLong(9, entity.getIsDoing() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsDone() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SheetInfo readEntity(Cursor cursor, int offset) {
        SheetInfo entity = new SheetInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sheetId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sheetName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sheetIntro
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // branchId
            cursor.getShort(offset + 5) != 0, // isDownLoad
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // doneTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // length
            cursor.getShort(offset + 8) != 0, // isDoing
            cursor.getShort(offset + 9) != 0 // isDone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SheetInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSheetId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSheetName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSheetIntro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBranchId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsDownLoad(cursor.getShort(offset + 5) != 0);
        entity.setDoneTime(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLength(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsDoing(cursor.getShort(offset + 8) != 0);
        entity.setIsDone(cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SheetInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SheetInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
