package com.cug.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cug.greendao.RecordInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_INFO".
*/
public class RecordInfoDao extends AbstractDao<RecordInfo, Long> {

    public static final String TABLENAME = "RECORD_INFO";

    /**
     * Properties of entity RecordInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RecordId = new Property(1, Integer.class, "recordId", false, "RECORD_ID");
        public final static Property RecordGps = new Property(2, String.class, "recordGps", false, "RECORD_GPS");
        public final static Property RecordAsws = new Property(3, String.class, "recordAsws", false, "RECORD_ASWS");
        public final static Property RecordError = new Property(4, Integer.class, "recordError", false, "RECORD_ERROR");
        public final static Property RecordPic = new Property(5, String.class, "recordPic", false, "RECORD_PIC");
        public final static Property RecordStart = new Property(6, String.class, "recordStart", false, "RECORD_START");
        public final static Property RecordEnd = new Property(7, String.class, "recordEnd", false, "RECORD_END");
        public final static Property RecordSub = new Property(8, String.class, "recordSub", false, "RECORD_SUB");
        public final static Property RecordStatus = new Property(9, Boolean.class, "recordStatus", false, "RECORD_STATUS");
        public final static Property CheckerId = new Property(10, Integer.class, "checkerId", false, "CHECKER_ID");
        public final static Property RecordNote = new Property(11, String.class, "recordNote", false, "RECORD_NOTE");
        public final static Property CheckTime = new Property(12, String.class, "checkTime", false, "CHECK_TIME");
        public final static Property IsChanged = new Property(13, boolean.class, "isChanged", false, "IS_CHANGED");
        public final static Property ResponseId = new Property(14, String.class, "responseId", false, "RESPONSE_ID");
    };


    public RecordInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RecordInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RECORD_ID\" INTEGER," + // 1: recordId
                "\"RECORD_GPS\" TEXT," + // 2: recordGps
                "\"RECORD_ASWS\" TEXT," + // 3: recordAsws
                "\"RECORD_ERROR\" INTEGER," + // 4: recordError
                "\"RECORD_PIC\" TEXT," + // 5: recordPic
                "\"RECORD_START\" TEXT," + // 6: recordStart
                "\"RECORD_END\" TEXT," + // 7: recordEnd
                "\"RECORD_SUB\" TEXT," + // 8: recordSub
                "\"RECORD_STATUS\" INTEGER," + // 9: recordStatus
                "\"CHECKER_ID\" INTEGER," + // 10: checkerId
                "\"RECORD_NOTE\" TEXT," + // 11: recordNote
                "\"CHECK_TIME\" TEXT," + // 12: checkTime
                "\"IS_CHANGED\" INTEGER NOT NULL ," + // 13: isChanged
                "\"RESPONSE_ID\" TEXT);"); // 14: responseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecordInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindLong(2, recordId);
        }
 
        String recordGps = entity.getRecordGps();
        if (recordGps != null) {
            stmt.bindString(3, recordGps);
        }
 
        String recordAsws = entity.getRecordAsws();
        if (recordAsws != null) {
            stmt.bindString(4, recordAsws);
        }
 
        Integer recordError = entity.getRecordError();
        if (recordError != null) {
            stmt.bindLong(5, recordError);
        }
 
        String recordPic = entity.getRecordPic();
        if (recordPic != null) {
            stmt.bindString(6, recordPic);
        }
 
        String recordStart = entity.getRecordStart();
        if (recordStart != null) {
            stmt.bindString(7, recordStart);
        }
 
        String recordEnd = entity.getRecordEnd();
        if (recordEnd != null) {
            stmt.bindString(8, recordEnd);
        }
 
        String recordSub = entity.getRecordSub();
        if (recordSub != null) {
            stmt.bindString(9, recordSub);
        }
 
        Boolean recordStatus = entity.getRecordStatus();
        if (recordStatus != null) {
            stmt.bindLong(10, recordStatus ? 1L: 0L);
        }
 
        Integer checkerId = entity.getCheckerId();
        if (checkerId != null) {
            stmt.bindLong(11, checkerId);
        }
 
        String recordNote = entity.getRecordNote();
        if (recordNote != null) {
            stmt.bindString(12, recordNote);
        }
 
        String checkTime = entity.getCheckTime();
        if (checkTime != null) {
            stmt.bindString(13, checkTime);
        }
        stmt.bindLong(14, entity.getIsChanged() ? 1L: 0L);
 
        String responseId = entity.getResponseId();
        if (responseId != null) {
            stmt.bindString(15, responseId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecordInfo readEntity(Cursor cursor, int offset) {
        RecordInfo entity = new RecordInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // recordId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // recordGps
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // recordAsws
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // recordError
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // recordPic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // recordStart
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // recordEnd
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // recordSub
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // recordStatus
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // checkerId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // recordNote
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // checkTime
            cursor.getShort(offset + 13) != 0, // isChanged
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // responseId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecordInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRecordGps(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecordAsws(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecordError(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRecordPic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecordStart(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRecordEnd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRecordSub(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRecordStatus(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setCheckerId(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRecordNote(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCheckTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsChanged(cursor.getShort(offset + 13) != 0);
        entity.setResponseId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecordInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecordInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
