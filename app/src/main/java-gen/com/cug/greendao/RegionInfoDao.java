package com.cug.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cug.greendao.RegionInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGION_INFO".
*/
public class RegionInfoDao extends AbstractDao<RegionInfo, Long> {

    public static final String TABLENAME = "REGION_INFO";

    /**
     * Properties of entity RegionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RegionId = new Property(1, int.class, "regionId", false, "REGION_ID");
        public final static Property SheetId = new Property(2, Integer.class, "sheetId", false, "SHEET_ID");
        public final static Property Branch = new Property(3, String.class, "branch", false, "BRANCH");
        public final static Property RegionName = new Property(4, String.class, "regionName", false, "REGION_NAME");
        public final static Property RegionIntro = new Property(5, String.class, "regionIntro", false, "REGION_INTRO");
        public final static Property RegionGps = new Property(6, String.class, "regionGps", false, "REGION_GPS");
        public final static Property RegionQrcode = new Property(7, String.class, "regionQrcode", false, "REGION_QRCODE");
        public final static Property RegionSort = new Property(8, Integer.class, "regionSort", false, "REGION_SORT");
        public final static Property RegionType = new Property(9, String.class, "regionType", false, "REGION_TYPE");
        public final static Property RegionRange = new Property(10, String.class, "regionRange", false, "REGION_RANGE");
        public final static Property PeriodId = new Property(11, Integer.class, "periodId", false, "PERIOD_ID");
        public final static Property PtrId = new Property(12, Integer.class, "ptrId", false, "PTR_ID");
        public final static Property IsDone = new Property(13, Boolean.class, "isDone", false, "IS_DONE");
    };


    public RegionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RegionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REGION_ID\" INTEGER NOT NULL ," + // 1: regionId
                "\"SHEET_ID\" INTEGER," + // 2: sheetId
                "\"BRANCH\" TEXT," + // 3: branch
                "\"REGION_NAME\" TEXT," + // 4: regionName
                "\"REGION_INTRO\" TEXT," + // 5: regionIntro
                "\"REGION_GPS\" TEXT," + // 6: regionGps
                "\"REGION_QRCODE\" TEXT," + // 7: regionQrcode
                "\"REGION_SORT\" INTEGER," + // 8: regionSort
                "\"REGION_TYPE\" TEXT," + // 9: regionType
                "\"REGION_RANGE\" TEXT," + // 10: regionRange
                "\"PERIOD_ID\" INTEGER," + // 11: periodId
                "\"PTR_ID\" INTEGER," + // 12: ptrId
                "\"IS_DONE\" INTEGER);"); // 13: isDone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGION_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RegionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRegionId());
 
        Integer sheetId = entity.getSheetId();
        if (sheetId != null) {
            stmt.bindLong(3, sheetId);
        }
 
        String branch = entity.getBranch();
        if (branch != null) {
            stmt.bindString(4, branch);
        }
 
        String regionName = entity.getRegionName();
        if (regionName != null) {
            stmt.bindString(5, regionName);
        }
 
        String regionIntro = entity.getRegionIntro();
        if (regionIntro != null) {
            stmt.bindString(6, regionIntro);
        }
 
        String regionGps = entity.getRegionGps();
        if (regionGps != null) {
            stmt.bindString(7, regionGps);
        }
 
        String regionQrcode = entity.getRegionQrcode();
        if (regionQrcode != null) {
            stmt.bindString(8, regionQrcode);
        }
 
        Integer regionSort = entity.getRegionSort();
        if (regionSort != null) {
            stmt.bindLong(9, regionSort);
        }
 
        String regionType = entity.getRegionType();
        if (regionType != null) {
            stmt.bindString(10, regionType);
        }
 
        String regionRange = entity.getRegionRange();
        if (regionRange != null) {
            stmt.bindString(11, regionRange);
        }
 
        Integer periodId = entity.getPeriodId();
        if (periodId != null) {
            stmt.bindLong(12, periodId);
        }
 
        Integer ptrId = entity.getPtrId();
        if (ptrId != null) {
            stmt.bindLong(13, ptrId);
        }
 
        Boolean isDone = entity.getIsDone();
        if (isDone != null) {
            stmt.bindLong(14, isDone ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RegionInfo readEntity(Cursor cursor, int offset) {
        RegionInfo entity = new RegionInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // regionId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sheetId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // branch
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // regionName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // regionIntro
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // regionGps
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // regionQrcode
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // regionSort
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // regionType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // regionRange
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // periodId
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // ptrId
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0 // isDone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RegionInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRegionId(cursor.getInt(offset + 1));
        entity.setSheetId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBranch(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRegionName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegionIntro(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegionGps(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRegionQrcode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegionSort(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setRegionType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRegionRange(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPeriodId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPtrId(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setIsDone(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RegionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RegionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
